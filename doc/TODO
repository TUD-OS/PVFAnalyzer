Version roadmap
---------------

v0.1:
* read input from
  [x] command line
  [x] byte file
  [ ] ELF binary (section)
* [ ] make a CFG creation pass running as far as possible
      (e.g., ignoring dynamic jumps)
* [ ] CFG pretty printing
* [x] wvtest
* [x] valgrind

v0.2:
* dynamic analysis:
  [ ] mark dynamic jumps during static analysis run and then 
  [ ] use dynamic  tracing to determine the jump targets at runtime
  * still ignore those dynamic jumps that cannot be resolved by a simple dynamic run
    (e.g., that would require forcing execution down a certain path)

v0.3:
* [ ] first simple PVF analysis

Later versions:
* integrate with another tool (KLEE?) to aid dynamic jump exploration


TODO items
----------

* CFG data structure
  * entry point (address)
  * Nodes:
    * instruction address
    * instruction information (e.g., ud_t)
    * linkage information (predecessor / successor instructions)

* Program startup
  * Analyzer works on an InputStream and transforms it into a CFG
    * InputStream is basically a dynamically growing array of bytes
    * methods:
		addByte(uint8_t b);
		addBytes(uint8_t *buf, size_t count);
		
  * InputStream is generated from InputReaders
		* Hex input reader:
			- reads command line arguments one at a time -> stream->addByte()
		* File reader:
			- read first bytes to distinguish between ELF binaries and
			  dump files
			- ELF binaries: parsed using libELF
			  - unpack sections, start at entry point -> stream->addBytes()
			- memory dump files: no unpacking, simply mmap and stream->addBytes()

* Analysis runners
  * Static analysis runner

    (A) Source: Memory dump
        - interpret given image in memory as instructions and
          build CFG.
        - easy to use e.g., for testing
        - dynamic runs won't necessarily be possible
          (though, we can still fork() and jump to execute buffer)

    (B) Source: Binary file
        - parse ELF information

  * Dynamic analysis runner

    (A) PTrace-based
        - target Linux binaries

    (B) VM-based
        - target OS code
