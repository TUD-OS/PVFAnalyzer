#!/usr/bin/python

#
# Run CFG reader and printer on an ELF binary and rewrite
# function entry nodes to contain the respective function
# names (as taken from running nm on the binary).
#

import sys, os, subprocess, re


def getFunctions(filename):
    nmCmd = "nm -C %s | grep ' [WTt] '" % filename

    a2n = {}
    n2a = {}

    out = subprocess.check_output(nmCmd, shell=True)

    for line in out.split("\n"):
        if line == "":
            continue

        (addr, T, name) = line.strip().split(None, 2)
        a2n[addr] = name
        n2a[name] = addr

    return (a2n, n2a)


def findExitLocations(filename):
    ret = []
    try:
        odumpCmd = "objdump -lSCd %s | grep exit" % filename
        out = subprocess.check_output(odumpCmd, shell=True)
    except subprocess.CalledProcessError:
        return []

    for line in out.split("\n"):
        m = re.match("\s*([0-9a-f]+?):.*call.*exit.*", line)
        if m:
            print m.groups()
            ret += [m.groups(1)]

    return ret


def readCFG(filename, entry):
    exitLocations = findExitLocations(filename)
    readerCmd = "build/reader/reader -f %s -e 0x%x -o cfgtmp.cfg" % (sys.argv[1], entry)
    if len(exitLocations) > 0:
        readerCmd += (" -t 0x%s" % exitLocations[0])
        for l in exitLocations[1:]:
            readerCmd += (",0x%s" % l)
    print readerCmd
    print subprocess.check_output(readerCmd.split())


def runPrinter():
    printerCmd = "build/printer/printer -f cfgtmp.cfg -cfunc -o -"
    return subprocess.check_output(printerCmd.split())


def findFunctionAndOffset(addr2Name, addr):
    mini = 1000000000
    mink = -1
    for k in addr2Name.keys():
        diff = int(addr, 16) - int(k,16)
        if diff >= 0 and diff < mini:
            mini = diff
            mink = k
    return (mink, mini)



def rewritePrinter(out, addr2Name):
    outFile = file("cfgNamed.dot", "w")
    for l in out.split("\n")[3:]:
        m = re.match("(.*)\[@0x([0-9a-f]+)\](.*)", l)
        if m is not None:
            searchString = "%08x" % int(m.groups()[1], 16)
            #print 
            #print addr2Name, searchString
            #print
            (func, offs) = findFunctionAndOffset(addr2Name, searchString)
            try:
                funcName = addr2Name[func]
                #funcName = addr2Name[searchString]
            except KeyError:
                funcName = ""

            if funcName == "":
                outFile.write(l+"\n")
            else:
                outFile.write("%s[%s+0x%x]%s\n" % (m.groups()[0], funcName[:30], offs, m.groups()[2]))
        else:
            outFile.write(l+"\n")


def writeDOT():
    cmd = "dot -Tpng cfgNamed.dot"
    subprocess.call(cmd.split(), stdout=file("cfg.png", "w"))


def showDOT():
    cmd = "gpicview cfg.png"
    subprocess.call(cmd.split())
    
    cmd = "rm cfg.png cfgNamed.dot cfgtmp.cfg"
    subprocess.call(cmd.split())


def main():
    if len(sys.argv) < 2 or len(sys.argv) > 3:
        print "Usage: %s <binary> [CFGFile]" % sys.argv[0]
        sys.exit(1)

    (addr2Name, name2Addr) = getFunctions(sys.argv[1])
    #for k in addr2Name:
    #    print k, " -> ", addr2Name[k][:20]

    mainAddress = int(name2Addr["main"], 16)

    if len(sys.argv) > 2:
        cpcmd = "cp %s cfgtmp.cfg" % sys.argv[2]
        print cpcmd
        subprocess.call(cpcmd.split())
    else:
        readCFG(sys.argv[1], mainAddress)

    rewritePrinter(runPrinter(), addr2Name)
    writeDOT()
    showDOT()

if __name__ == "__main__":
	main()
